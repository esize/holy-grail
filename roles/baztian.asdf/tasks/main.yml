---
- name: Include either root/opt or user specific vars
  include_vars: "shared_user_approach_{{ asdf_shared_user_approach | bool }}.yml"
  tags: asdf
- name: Update apt cache.
  apt: update_cache=yes cache_valid_time=3600
  tags: asdf
- name: Install tools commonly necessary to be able to install some asdf plugins
  apt:
    pkg:
      - curl
      - git
      - gnupg-agent
      - unzip
  tags: asdf
- name: Check if asdf {{ asdf_version }} already installed
  stat:
    path: /opt/asdf-{{ asdf_version }}
  register: asdf_directory
  tags: asdf
- name: Download asdf {{ asdf_version }}
  get_url:
    url: "https://github.com/asdf-vm/asdf/archive/v{{ asdf_version }}.tar.gz"
    checksum: "sha256:{{ asdf_sha256 }}"
    dest: "/tmp/asdf-{{ asdf_version }}.tar.gz"
  tags: asdf
  when: not asdf_directory.stat.exists
- name: Create asdf-{{ asdf_version }} directory
  file:
    path: "/opt/asdf-{{ asdf_version }}"
    state: directory
    mode: 0755
  tags: asdf
- name: Install asdf {{ asdf_version }}
  unarchive:
    src: "/tmp/asdf-{{ asdf_version }}.tar.gz"
    extra_opts:
      - "--strip-components=1"
    dest: "/opt/asdf-{{ asdf_version }}"
    remote_src: yes
  tags: asdf
  when: not asdf_directory.stat.exists
- name: Symlink default asdf
  file:
    src: "asdf-{{ asdf_version }}"
    dest: "/opt/asdf"
    state: link
  tags: asdf
- name: Install asdf to the path and enable root controlled configuration
  blockinfile:
    path: /etc/bash.bashrc
    marker: "# {mark} ANSIBLE MANAGED BLOCK asdf"
    block: "{{ asdf_bashrc }}"
  tags: asdf
- name: Make sure /etc/bash_completion.d exists
  file:
    path: /etc/bash_completion.d/
    state: directory
    mode: 0755
  tags: asdf
- name: Symlink asdf bash completion
  file:
    src: "/opt/asdf/completions/asdf.bash"
    dest: "/etc/bash_completion.d/asdf_completer"
    state: link
  tags: asdf
- name: Install asdf plugins
  command: "/opt/asdf/bin/asdf plugin add {{ item.name }}"
  args:
    creates: "{{ asdf_data_dir }}/plugins/{{ item.name }}"
  environment:
    ASDF_DATA_DIR: "{{ asdf_data_dir }}"
  with_items: "{{ asdf_plugins }}"
  become: "{{ asdf_become }}"
  tags: asdf
- name: Install app versions for the asdf plugins
  command: "/opt/asdf/bin/asdf install {{ item.0.name }} {{ item.1 }}"
  args:
    creates: "{{ asdf_data_dir }}/installs/{{ item.0.name }}/{{ item.1 }}"
  environment:
    ASDF_DATA_DIR: "{{ asdf_data_dir }}"
    PATH: "{{ ansible_env.PATH }}:/opt/asdf/bin/"
  with_subelements:
    - "{{ asdf_plugins }}"
    - versions
    - flags:
      skip_missing: True
  become: "{{ asdf_become }}"
  tags: asdf
- name: Read app default versions
  command: "/opt/asdf/bin/asdf current"
  environment:
    ASDF_DATA_DIR: "{{ asdf_data_dir }}"
    PATH: "{{ ansible_env.PATH }}:/opt/asdf/bin/"
  register: asdf_current_versions
  ignore_errors: True
  changed_when: False
  become: no
  tags: asdf
- name: Define global asdf app default versions for the current user
  command: "/opt/asdf/bin/asdf global {{ item.name }} {{ item.global }}"
  environment:
    ASDF_DATA_DIR: "{{ asdf_data_dir }}"
  when: >
    item.global is defined and asdf_current_versions.stdout
    is not search(item.name|regex_escape + '\s+' +
                  item.global|regex_escape + '\s+')
  with_items: "{{ asdf_plugins }}"
  become: no
  tags: asdf
