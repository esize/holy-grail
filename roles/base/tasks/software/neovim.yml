- name: Ensure FUSE is installed for AppImages
  ansible.builtin.apt:
    name: libfuse2
    state: present

- name: Remove existing Neovim installations
  ansible.builtin.apt:
    name: neovim
    state: absent

- name: Ensure /usr/local/bin exists
  ansible.builtin.file:
    path: /usr/local/bin
    state: directory
    mode: '0755'

- name: Check installed Neovim version
  ansible.builtin.command: nvim --version
  register: installed_nvim_version
  ignore_errors: true
  changed_when: false

- name: Get latest Neovim release version from GitHub
  ansible.builtin.uri:
    url: "https://api.github.com/repos/neovim/neovim/releases/latest"
    return_content: yes
  register: latest_nvim_release

- name: Extract latest version tag
  ansible.builtin.set_fact:
    latest_nvim_version: "{{ latest_nvim_release.json.tag_name | regex_replace('^v', '') }}"

- name: Backup current Neovim binary if it exists
  ansible.builtin.command: mv /usr/local/bin/nvim /usr/local/bin/nvim.old
  args:
    removes: /usr/local/bin/nvim
  when: installed_nvim_version.stdout is defined

- name: Download latest Neovim AppImage
  when: >
    installed_nvim_version.failed or
    installed_nvim_version.stdout.split()[1] != latest_nvim_version
  block:
    - name: Remove any old Neovim versions
      ansible.builtin.file:
        path: /usr/local/bin/nvim.old
        state: absent

    - name: Download Neovim AppImage
      ansible.builtin.get_url:
        url: "https://github.com/neovim/neovim/releases/download/v{{ latest_nvim_version }}/nvim-linux-x86_64.appimage"
        dest: "/usr/local/bin/nvim"
        mode: '0755'

    - name: Ensure Neovim AppImage is executable
      ansible.builtin.file:
        path: /usr/local/bin/nvim
        mode: '0755'

- name: Verify Neovim installation
  ansible.builtin.command: nvim --version
  register: new_nvim_version
  changed_when: false
  ignore_errors: true

- name: If FUSE fails, extract Neovim AppImage manually
  when: new_nvim_version.rc != 0
  block:
    - name: Extract Neovim AppImage
      shell: "/usr/local/bin/nvim --appimage-extract"
      args:
        chdir: /usr/local/bin
        creates: /usr/local/bin/squashfs-root

    - name: Move extracted binary to /usr/local/bin
      ansible.builtin.copy:
        src: "/usr/local/bin/squashfs-root/usr/bin/nvim"
        dest: "/usr/local/bin/nvim"
        remote_src: yes
        mode: '0755'

    - name: Clean up extracted files
      ansible.builtin.file:
        path: /usr/local/bin/squashfs-root
        state: absent

- name: Final Neovim verification
  ansible.builtin.command: nvim --version
  register: final_nvim_version
  changed_when: false
  ignore_errors: true


- name: Remove backup binary if update was successful
  ansible.builtin.file:
    path: /usr/local/bin/nvim.old
    state: absent
  when: new_nvim_version.rc == 0

- name: Clone neovim config
  ansible.builtin.git:
    repo: 'https://github.com/esize/my.nvim.git'
    dest: /home/evan/.config/nvim
    clone: yes
    update: yes
    force: yes

- name: Own neovim directory
  ansible.builtin.file:
    path: /home/evan/.config/nvim
    owner: evan
    group: evan
    recurse: true

- name: Install c compiler
  ansible.builtin.apt:
    pkg:
      - build-essential

- stat:
    path: /home/evan/.nvm
  register: nvm_path

- name: Setup NVM
  become: yes
  become_flags: -i 
  become_user: evan 
  block:
    - name: Install nvm
      shell: >
        curl -o- https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash 
      args:
        chdir: "$HOME"
        creates: "$HOME/.nvm/nvm.sh"

- name: add {{extra_path}} to path
  lineinfile:
    dest: /etc/environment
    state: present
    backrefs: yes
    regexp: 'PATH=(["]*)((?!.*?"{{extra_path}}").*?)(["]*)$'
    line: 'PATH=\1\2:"{{extra_path}}"\3'
  vars:
    extra_path: "$HOME/.nvm/nvm.sh"


  when: nvm_path.stat.exists == false

- name: Install node version using NVM
  become: yes
  become_flags: -i 
  become_user: evan 
  block:
  - name: Install node versions using loop
    shell: >
      bash -c "source $HOME/.nvm/nvm.sh && nvm install v{{ item }}"
    args:
      executable: /bin/bash
    loop:
      - 22.14.0
  - name: Install TypeScript
    shell: >
      bash -c "source $HOME/.nvm/nvm.sh && npm install -g typescript"
    args:
      executable: /bin/bash


- name: Ensure Neovim plugins are installed using Lazy.nvim
  become: yes
  become_flags: -i
  become_user: evan
  shell: >
    nvim --headless "+Lazy! sync" +qa
  args:
    executable: /bin/bash
  changed_when: false