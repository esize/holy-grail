---
name: Test and release

# This workflow is triggered on pushes to the repository.
on:
  pull_request:
    branches:
      - "**"
  push:
    branches:
      - master
    tags:
      - v.*

jobs:
  lint:
    name: Lint with pre-commit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14"
      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - uses: actions/setup-go@v2
        with:
          go-version: "1.18"
      - name: Install dependencies
        run: |
          pip3 install -r requirements.dev.txt
          go install mvdan.cc/sh/v3/cmd/shfmt@latest
          sudo apt-get install -y shellcheck
          python --version
          shfmt -version
          shellcheck --version
          pre-commit --version
      - name: Cache pre-commit dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pre-commit/
          # yamllint disable-line rule:line-length
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('**/.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pre-commit-
      - name: Run pre-commit
        run: pre-commit run -a

  macos:
    name: Test on macOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Ansible
        run: |
          brew update
          brew install ansible
      - name: Test syntax
        run: |
          ./tests/test_syntax.sh
      - name: Test install
        run: |
          ./tests/test_install.sh

  ubuntu:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distrib: [ubuntu]
        release: [focal]
        install_with: [git, homebrew]
        include:
          - distrib: ubuntu
            release: jammy
            install_with: git
    name: Test - ${{ matrix.distrib }} ${{ matrix.release }} - ${{ matrix.install_with }}
    env:
      DISTRIB: ${{ matrix.distrib }}
      RELEASE: ${{ matrix.release }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: pip3 install -r requirements.dev.txt
      - name: Update test images
        run: |
          ./tests/update_test_images.py \
            --distrib=${DISTRIB} \
            --release=${RELEASE}
      - name: Run tests with Git install
        run: ./tests/run-tests.sh ${RELEASE}
        if: ${{ matrix.install_with == 'git' }}
      - name: Run tests with Homebrew install
        run: ./tests/run-tests.sh ${RELEASE}-with-homebrew
        if: ${{ matrix.install_with == 'homebrew' }}

  debian:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distrib: [debian]
        release: [bullseye]
        install_with: [git, homebrew]
    name: Test - ${{ matrix.distrib }} ${{ matrix.release }} - ${{ matrix.install_with }}
    env:
      DISTRIB: ${{ matrix.distrib }}
      RELEASE: ${{ matrix.release }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: pip3 install -r requirements.dev.txt
      - name: Update test images
        run: |
          ./tests/update_test_images.py \
            --distrib=${DISTRIB} \
            --release=${RELEASE}
      - name: Run tests with Git install
        run: ./tests/run-tests.sh ${RELEASE}
        if: ${{ matrix.install_with == 'git' }}
      - name: Run tests with Homebrew install
        run: ./tests/run-tests.sh ${RELEASE}-with-homebrew
        if: ${{ matrix.install_with == 'homebrew' }}

  archlinux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distrib: [archlinux]
        release: [archlinux]
        install_with: [git]
    name: Test - ${{ matrix.distrib }} ${{ matrix.release }} - ${{ matrix.install_with }}
    env:
      DISTRIB: ${{ matrix.distrib }}
      RELEASE: ${{ matrix.release }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: pip3 install -r requirements.dev.txt
      - name: Update test images
        run: |
          ./tests/update_test_images.py \
            --distrib=${DISTRIB} \
            --release=${RELEASE} \
            --no-homebrew
      - name: Run tests with Git install
        run: ./tests/run-tests.sh ${RELEASE}
        if: ${{ matrix.install_with == 'git' }}

  release:
    name: Publish tagged releases to Ansible Galaxy
    needs:
      - lint
      - macos
      - ubuntu
      - debian
      - archlinux
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: galaxy
        uses: robertdebock/galaxy-action@1.2.0
        with:
          galaxy_api_key: ${{ secrets.galaxy_api_key }}
